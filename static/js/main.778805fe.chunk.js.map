{"version":3,"sources":["components/LengthController.js","classes/Timer.js","App.js","serviceWorker.js","index.js"],"names":["LengthController","_this$props","this","props","id","length","onClick","label","labelId","dataElement","incId","decId","react_default","a","createElement","className","data-element","value","Component","Timer","time","Object","classCallCheck","seconds","display","minutes","_time$split","split","_time$split2","slicedToArray","parseInt","toString","padStart","localStorage","setItem","defaultState","breakLength","sessionLength","timer","timerLabel","timerActiveId","App","_this","possibleConstructorReturn","getPrototypeOf","call","state","objectSpread","toggleCoundDown","bind","assertThisInitialized","setSession","setBreak","reset","audio","document","getElementById","pause","currentTime","clearInterval","setState","e","target","_this2","timerId","setInterval","decrement","play","_this$state","components_LengthController","src","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.778805fe.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n* @augments {Component<{  dataElement:any,  decId:any,  id:any,  incId:any,  label:any,  labelId:any,  length:any,  onClick:any>}\r\n*/\r\nclass LengthController extends Component {\r\n\r\n    render() {\r\n        const { id, length, onClick, label, labelId, dataElement, incId, decId } = this.props;\r\n        return (\r\n            <div className=\"flex flex-col justify-center items-center\">\r\n                <h2 id={labelId}>{label}</h2>\r\n                <div>\r\n                <button data-element={dataElement} id={decId} value=\"-\" className=\"p-2 m-2 rounded-full text-pink-darkest shadow-md bg-teal fa fa-minus inline-block\" onClick={onClick}></button>\r\n                <span id={id}>{length}</span>\r\n                <button data-element={dataElement} id={incId} value=\"+\" className=\"p-2 m-2 rounded-full text-pink-darkest shadow-md bg-teal fa fa-plus inline-block\" onClick={onClick}></button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nLengthController.propTypes = {\r\n  dataElement: PropTypes.any,\r\n  decId: PropTypes.any,\r\n  id: PropTypes.any,\r\n  incId: PropTypes.any,\r\n  label: PropTypes.any,\r\n  labelId: PropTypes.any,\r\n  length: PropTypes.any,\r\n  onClick: PropTypes.any\r\n}\r\n\r\nexport default LengthController;","class Timer {\r\n\r\n    constructor(time) {\r\n      this.seconds = 0;\r\n      this.display = time;\r\n    }\r\n  \r\n    decrement() {\r\n      this.seconds -= 1;\r\n    }\r\n  \r\n    set display(time) {\r\n      let minutes=0, seconds = 0;\r\n      if (typeof time === \"string\") {\r\n        [minutes, seconds] = time.split(\":\");\r\n      } else {\r\n        minutes = time;\r\n      }\r\n      this.seconds = parseInt(minutes, 10) * 60 + parseInt(seconds, 10);\r\n  \r\n    }\r\n  \r\n    get display() {\r\n      let minutes = parseInt(this.seconds / 60, 10);\r\n      let seconds = parseInt(this.seconds % 60, 10);\r\n      return minutes.toString().padStart(2, '0') + \":\" + seconds.toString().padStart(2, '0');\r\n    }\r\n  \r\n  }\r\n\r\n  export default Timer;","import React, { Component } from 'react';\nimport './App.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport LengthController from './components/LengthController';\nimport Timer from './classes/Timer';\n\n// PROJECTOR SELECTOR FOR EXTERNAL TEST SCRIPT:\nlocalStorage.setItem('example_project', 'Pomodoro Clock');\n\nconst defaultState = {\n  breakLength: 5,\n  sessionLength:  25,\n  timer: \"25:00\",\n  timerLabel: \"Session\",\n  timerActiveId: null\n}\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = { ...defaultState };\n\n    this.toggleCoundDown = this.toggleCoundDown.bind(this);\n    this.setSession = this.setSession.bind(this);\n    this.setBreak = this.setBreak.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n\n  reset() {\n    let audio = document.getElementById(\"beep\");\n    audio.pause();\n    audio.currentTime = 0;\n    clearInterval(this.state.timerActiveId);\n    this.setState(defaultState);\n  }\n\n  setSession(e) {\n\n    let { sessionLength } = this.state;\n\n    if ( e.target.value === \"+\" && sessionLength < 60) {\n      sessionLength++;\n      let timer = new Timer(sessionLength);\n      this.setState({\n        sessionLength: sessionLength,\n        timer: timer.display\n      });\n    } else if (e.target.value === \"-\" && sessionLength > 1) {\n      sessionLength--;\n      let timer = new Timer(sessionLength);\n      this.setState({\n        sessionLength: sessionLength,\n        timer: timer.display\n      });\n    }\n  }\n\n  setBreak(e) {\n\n    let { breakLength } = this.state;\n\n    if (e.target.value === \"+\" && breakLength < 60) {\n      this.setState({\n        breakLength: ++breakLength,\n      })\n    } else if (e.target.value === \"-\" && breakLength > 1) {\n      this.setState({\n        breakLength: --breakLength,\n      })\n    }   \n  }\n\n  toggleCoundDown(e) {\n\n    if (this.state.timerActiveId) {\n\n      clearInterval(this.state.timerActiveId);\n      this.setState({\n        timerActiveId: null\n      });\n    } else {\n\n      let timerId = setInterval(() => {\n\n        let { timerLabel } = this.state;\n        let timer = new Timer(this.state.timer);\n        timer.decrement();\n\n        if (timer.seconds < 0) {\n\n          let audio = document.getElementById(\"beep\");\n          audio.play();\n\n          if ( timerLabel === 'Session') {\n            timerLabel = \"Break\";\n            timer.display = this.state.breakLength;\n          } else {\n            timerLabel = \"Session\";\n            timer.display = this.state.sessionLength;\n          }\n        }\n  \n        this.setState({\n          timer: timer.display,\n          timerLabel: timerLabel\n        })\n      } ,1000);\n  \n      this.setState({\n        timerActiveId: timerId\n      })\n    }\n  }\n\n  render() {\n\n    const { breakLength, sessionLength, timerLabel, timer, timerActiveId} = this.state;\n\n    return (\n      <main className=\"flex flex-col justify-center items-center h-screen bg-teal-dark text-pink-darkest font-mono\">\n        <h1>Pomodoro Clock</h1>\n        <div className=\"flex flex-col lg:flex-row justify-center items-center\">\n          <LengthController\n            id=\"break-length\" labelId=\"break-label\" label=\"Break Length\"\n            dataElement=\"break\" incId=\"break-increment\" decId=\"break-decrement\"\n            onClick={this.setBreak} length={breakLength} \n          />\n          <div className=\"flex flex-col justify-center items-center rounded-full shadow-lg bg-teal-light p-12 lg:p-24 m-2 lg:m-12\">\n            <span className=\"text-2xl\" id=\"timer-label\">{timerLabel}</span>\n            <span className=\"text-5xl\" id=\"time-left\">{timer}</span><br />\n          </div>\n          <LengthController\n            id=\"session-length\" labelId=\"session-label\" label=\"Session Length\"\n            dataElement=\"session\" incId=\"session-increment\" decId=\"session-decrement\"\n            onClick={this.setSession} length={sessionLength}\n          />\n        </div>\n        <div>\n          <button id=\"start_stop\" onClick={this.toggleCoundDown} className={'p-5 m-2 rounded-full text-pink-darkest shadow-md bg-teal fa-3x fa ' + (timerActiveId ? 'fa-pause' : 'fa-play')}></button>\n          <button id=\"reset\" className=\"p-5 m-2 rounded-full text-pink-darkest shadow-md bg-teal fa fa-undo fa-3x\" onClick={this.reset}></button>\n        </div>\n        <audio id=\"beep\" src=\"audio/ring.mp3\"></audio>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './css/tailwind.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}